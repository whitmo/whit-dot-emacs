(add-to-list 'load-path "/Users/whit/.emacs.d/")

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(case-fold-search t)
 '(current-language-environment "English")
 '(dired-recursive-copies (quote always))
 '(dired-recursive-deletes (quote top))
 '(dvc-tips-enabled nil)
 '(exec-path (quote ("/opt/local/bin" "/sw/bin" "/sw/sbin" "/usr/bin" "/bin" "/usr/sbin" "/sbin" "/usr/X11R6/bin" "/sw/lib/emacs/22.0.50-carbon/i386-apple-darwin8" "/usr/local/bin" "/opt/local/Library/Frameworks/Python.framework/Versions/2.4/bin/")))
 '(global-font-lock-mode t nil (font-lock))
 '(grep-command "grep -nri -e ")
 '(grep-find-command "find . -not -path \"*svn*\" -not -path \"*pyc\" -type f -print0 | xargs -0 grep -in -e ")
 '(initial-scratch-message ";; scratch ;;

")
 '(js2-basic-offset 4)
 '(rst-level-face-base-light 15)
 '(safe-local-variable-values (quote ((todo-categories "Wedding" "NYC" "TestLayers" "Training" "Wicked" "Todo" "Todo" "Today" "Todo"))))
 '(shell-input-autoexpand (quote input))
 '(tool-bar-mode nil))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:stipple nil :background "gray5" :foreground "pale goldenrod" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal))))
 '(flymake-errline ((((class color)) (:background "DarkRed")))))
;;'(default ((t (:stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal)))))

;; get pymacs setup
;;(require 'pysmell)
;;(add-hook 'python-mode-hook (lambda () (pysmell-mode 1)))

;; diary mode
(setq view-diary-entries-initially t
       mark-diary-entries-in-calendar t
       number-of-diary-entries 7)
 (add-hook 'diary-display-hook 'fancy-diary-display)
 (add-hook 'today-visible-calendar-hook 'calendar-mark-today)

(load "django-mode.el")
(load "graphviz-dot-mode.el")

(setq-default transient-mark-mode t)
(set-cursor-color "light blue") 
(which-func-mode)
(setq load-path  (cons (expand-file-name "~/.emacs.d/") load-path))
(load "tramp")


;;pymacs
(autoload 'pymacs-load "pymacs" nil t)
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(eval-after-load "pymacs"
  '(add-to-list 'pymacs-load-path "/usr/lib/python2.4/site-packages"))

(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

;; chuck mode
(setq auto-mode-alist
   (append '(("\.ck$" . chuck-mode))
           auto-mode-alist))
(autoload 'chuck-mode "chuck" "Chuck-mode" t)



(add-to-list 'auto-mode-alist '("\\.pxd\\'" . pyrex-mode))
(add-to-list 'auto-mode-alist '("\\.pxi\\'" . pyrex-mode))
(add-to-list 'auto-mode-alist '("\\.pjs\\'" . python-mode))

(setq auto-mode-alist (cons '("\\.py$" . python-mode) auto-mode-alist))
(setq interpreter-mode-alist (cons '("python" . python-mode)
				   interpreter-mode-alist))

(autoload 'python-mode "python-mode" "Python editing mode." t)
(autoload 'pyrex-mode "pyrex-mode" "Pyrex editing mode." t)
(autoload 'doctest-mode "doctest-mode" "doctest editing mode." t)

;; -- python extras --
;;(require 'pycomplete)
;; bicycle repairman
;(pymacs-load "bikeemacs" "brm-")
;;(brm-init)
;;(setq py-python-command "/usr/bin/python2.4")

(define-skeleton py-module-template
  "Prompt the user for python module info"
  ""
  > "\"\"\" " \n
  > (skeleton-read "Project Name? ") \n
  > "~~~~~~~~~~~~~~~~~~~~" \n
  > (skeleton-read "Project Description? ") \n
  > \n
  > "\"\"\" " \n
  > \n
  > "__author__ = 'Whit Morriss <whit@openplans.org>'" \n
  > "__docformat__ = 'restructuredtext'" \n
  > "__copyright__ = 'Copyright The OpenPlanning Project 2007'" \n
  > "__license__  = 'The GNU Public License V2+'" \n
  > \n \n
  > _ \n)

(fset 'break 
      "import pdb;pdb.set_trace()\C-a\C-i")

(fset 'review
      "#@@ DWM: ")

(add-hook 'python-mode-hook 
		  '(lambda ()
		     (local-set-key  [(meta ?p) (meta ?p)] 'break)
))

(add-hook 'python-mode-hook 
		  '(lambda ()
		     (local-set-key  [(meta ?p) (meta ?r)] 'review)
))

(defvar gud-pdb-marker-regexp "^> \\([-a-zA-Z0-9_/.:\\ ()]*\\|<string>\\)(\\([0-9]+\\))\\([a-zA-Z0-9_]*\\|\\?\\)()\\(->[^\n]*\\)?\n")

;; (defadvice pdb (before gud-query-cmdline activate)
;;     \"Provide a better default command line when called interactively.\"    
;;     (interactive     
;;      (list (gud-query-cmdline '/usr/lib/python2.3/pdb.py                             
;; 			      (file-name-nondirectory buffer-file-name)))))

;;(setq tramp-default-method "ssh")
(load-library "javascript")
(require 'psvn)
(require 'sgml-mode)
(require 'doctest-mode)
(require 'css-mode)
(require 'php-mode)
(require 'rst) 

;;(add-to-list 'auto-mode-alist '("\\.js\\'" . javascript-mode))
;;(autoload 'javascript-mode "javascript" nil t)

(add-hook 'text-mode-hook 'rst-text-mode-bindings)

;;(setq auto-mode-alist (cons '("\\.js$" . javascript-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.rst$" . rst-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.css$" . css-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.php$" . php-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.css.dtml$" . css-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.zcml$" . sgml-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.pt$" . html-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.jst$" . django-mode) auto-mode-alist))

(setq javascript-indent-level 4)

(global-font-lock-mode t)
(global-set-key [f4] 'shell)
(global-set-key [f5] 'rename-buffer)
(global-set-key [f6] 'svn-status)
(global-set-key [f7] 'dvc-status)
(global-set-key "\M-g" 'goto-line)
(global-set-key "\M-s" 'grep-find)

;;(setq minibuffer-max-depth nil)

(setq frame-background-mode 'dark)


(setq auto-mode-alist
      (cons '("\\.txt$" . doctest-mode) auto-mode-alist))

;; Presentation font sizing
;; courier 24 font and 80x35 window dimension
;;(setq default-frame-alist '((width . 79)
;;(height . 25)
;;(font . "*-courier-*-150-*")
;;(setq initial-frame-alist default-frame-alist)))

;; from http://www.jwz.org/doc/tabs-vs-spaces.html
(defun untabify-buffer ()
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "[ \t]+$" nil t)
        (delete-region (match-beginning 0) (match-end 0)))
      (goto-char (point-min))
      (if (search-forward "\t" nil t)
          (untabify (1- (point)) (point-max))))
    nil)

;; never insert tabs ... always spaces
(setq-default indent-tabs-mode nil)

; add more hooks hereno
(add-hook 'c-mode-hook 
	  '(lambda ()
	     (make-local-variable 'write-contents-hooks)
	     (add-hook 'write-contents-hooks 'untabify-buffer)))

(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward)

(put 'scroll-left 'disabled nil)

;;(load-file "/Users/whit/.emacs.d/flymake.el")
(require 'flymake)
(when (load "flymake" t) 
  (defun flymake-pyflakes-init () 
    (let* ((temp-file (flymake-init-create-temp-buffer-copy 
                       'flymake-create-temp-inplace)) 
           (local-file (file-relative-name 
                        temp-file 
                        (file-name-directory buffer-file-name)))) 
      (list "pyflakes" (list local-file)))) 
  
  (add-to-list 'flymake-allowed-file-name-masks 
               '("\\.py\\'" flymake-pyflakes-init))) 

(add-hook 'find-file-hook 'flymake-find-file-hook)

(load-file "/usr/local/share/emacs/site-lisp/dvc/dvc-load.el")

;;(defun hazmat-select-word () 
;;  (interactive) (kill-new (thing-at-point â€˜word)))

;;;;;;;;;;;;
;;Sweet Sweet javascript mode
;; (add-hook 'javascript-mode-hook 
;; 			 '(lambda () 
;; 				 (js-mode)
;; 				 (turn-on-lazy-lock)
;; 				 (c-set-style "ellemtel")))

;; yasnippet
(add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet) ;; not yasnippet-bundle
(yas/initialize)
(yas/load-directory "~/.emacs.d/plugins/yasnippet/snippets")

;;;
;;; Org Mode
;;;
;;(add-to-list 'load-path (expand-file-name "~/org/lisp"))
;;(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))

;;(require 'org-install)
;;
;; Standard key bindings
;; (global-set-key "\C-cl" 'org-store-link)
;; (global-set-key "\C-ca" 'org-agenda)
;; (global-set-key "\C-cb" 'org-iswitchb)

;; (setq message-mode-hook
;;       (quote (orgstruct++-mode
;;               (lambda nil (setq fill-column 72) (flyspell-mode 1))
;;               turn-on-auto-fill
;;               bbdb-define-all-aliases)))

;; (add-hook 'org-mode-hook
;;           (lambda ()
;;             ;; yasnippet
;;             (make-variable-buffer-local 'yas/trigger-key)
;;             (setq yas/trigger-key [tab])
;;             (define-key yas/keymap [tab] 'yas/next-field-group)
;;             ;; flyspell mode to spell check everywhere
;;             (flyspell-mode 1)))
